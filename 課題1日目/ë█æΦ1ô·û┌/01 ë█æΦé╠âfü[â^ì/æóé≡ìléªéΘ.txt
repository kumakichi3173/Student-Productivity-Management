課題のデータ構造を考える


キー : タプル('生徒A', 'ハードル50m走')
値   : タプル(回数, 居残り分数)


Pythonの辞書(dictionary)で、タプルをキーに使えるかを確認してみます。
アウトプット画面でソートをする必要もあるので、それも合わせて確認します。


# データを作成(キー: 値)を羅列してます
data = {
  ('生徒A', 'ハードル50m走'): (5, 90),
  ('生徒B', '幅跳び'): (30, 0)
}


# タプルキーでデータから値を取り出します
print(data['生徒A', 'ハードル50m走'])
print(data['生徒B', '幅跳び'])


結果は以下のようになります。
(5, 90)
(30, 0)


--

ちなみにすべてのデータを取り出す場合は、items()メソッドを使います。

print(data.items())

結果は以下のようになります。
dict_items([(('生徒A', 'ハードル50m走'), (5, 90)), (('生徒B', '幅跳び'), (30, 0))])


-----

・ソート

items()メソッドを呼び出して、sorted()関数でソートをおこないます。


print(sorted(data.items()))

結果は以下のようになります。
[(('生徒A', 'ハードル50m走'), (5, 90)), (('生徒B', '幅跳び'), (30, 0))]


sortedのデフォルトは昇順なので、降順も試しておきます。

print(sorted(data.items(), reverse=True))

結果は以下のようになります。
[(('生徒B', '幅跳び'), (30, 0)), (('生徒A', 'ハードル50m走'), (5, 90))]


-----

・追加と削除(あと上書き)

追加する場合は、update()メソッドで追加するデータを引数で渡します。

data.update({('生徒C', '幅跳び'): (5, 30)})
print(data.items())

結果は以下のようになります。
dict_items([(('生徒A', 'ハードル50m走'), (5, 90)), (('生徒B', '幅跳び'), (30, 0)), (('生徒C', '幅跳び'), (5, 30))])


--

削除する場合は、pop()メソッドでキーを指定します。

data.pop(('生徒C', '幅跳び'))
print(data.items())

結果は以下のようになります。
dict_items([(('生徒A', 'ハードル50m走'), (5, 90)), (('生徒B', '幅跳び'), (30, 0))])

--


上書きは、update()ですでにdataの中に存在するキーを与えると上書きします。

data.update({('生徒A', 'ハードル50m走'): (10, 120)})
print(data.items())

結果は以下のようになります。
dict_items([(('生徒A', 'ハードル50m走'), (10, 120)), (('生徒B', '幅跳び'), (30, 0))])

